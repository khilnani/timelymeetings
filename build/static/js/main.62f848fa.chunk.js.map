{"version":3,"sources":["Notifications.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["checkCapacitorNotificationsAvailability","a","console","log","Capacitor","isPluginAvailable","isCapacitorPluginAvailable","LocalNotifications","checkPermissions","display","requestPermissions","alert","sendCapacitorNotification","message","when","isCapacitorNotificationsAvailable","schedule","notifications","title","body","id","Date","getTime","at","sound","attachments","actionTypeId","extra","success","clearCapacitorNotifications","getPending","pending","cancel","clearScheduledNotifications","scheduleNotification","sendTestNotification","now","toLocaleTimeString","App","state","data","bind","this","className","src","logo","alt","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAIeA,I,2EAAf,4BAAAC,EAAA,6DACEC,QAAQC,IAAI,2CADd,kBAI2CC,IAAUC,kBAAkB,sBAJvE,UAIQC,EAJR,OAKIJ,QAAQC,IAAI,8BAA+BG,IAEtCA,EAPT,iCAQoBC,IAAmBC,mBARvC,UASwB,YATxB,OASYC,QATZ,2CAUe,GAVf,yBAYsBF,IAAmBG,qBAZzC,WAa0B,YAb1B,OAacD,QAbd,2CAciB,GAdjB,0CAoBa,GApBb,yFAuBIE,MAAM,EAAD,IAvBT,mBAwBW,GAxBX,2D,+BA4BeC,E,gFAAf,WAAyCC,EAASC,GAAlD,iBAAAb,EAAA,6DACEC,QAAQC,IAAI,4BAA6BU,EAASC,GADpD,SAGgDd,IAHhD,UAGMe,EAHN,OAIEb,QAAQC,IAAI,qCAAsCY,IAE/CA,EANL,0CAQ0BR,IAAmBS,SAAS,CAC9CC,cAAe,CACb,CACEC,MAAO,iBACPC,KAAMN,EACNO,IAAI,IAAIC,MAAOC,UACfN,SAAU,CAAEO,GAAIT,GAChBU,MAAO,KACPC,YAAa,KACbC,aAAc,GACdC,MAAO,SAlBnB,cAQUC,EARV,OAsBM1B,QAAQC,IAAI,UAAWyB,GAtB7B,mBAuBa,GAvBb,yCAyBMjB,MAAM,EAAD,IAzBX,mBA0Ba,GA1Bb,kCA6BS,GA7BT,2D,+BAgCekB,I,2EAAf,8BAAA5B,EAAA,6DACEC,QAAQC,IAAI,+BADd,SAGsBI,IAAmBuB,aAHzC,cAGMC,EAHN,OAIMd,EAAgBc,EAAQd,cAC5Bf,QAAQC,IAAI,kCAAmCc,GALjD,SAOQV,IAAmByB,OAAOD,GAPlC,OAQE7B,QAAQC,IAAI,kCAAmCc,GARjD,4C,sBAwDO,SAAegB,IAAtB,+B,4CAAO,sBAAAhC,EAAA,6DACLC,QAAQC,IAAI,sBADP,SAEC0B,IAFD,4C,sBAkBA,SAAeK,EAAtB,oC,4CAAO,WAAoCrB,EAASC,GAA7C,eAAAb,EAAA,6DACLC,QAAQC,IAAI,uBAAwBU,EAASC,GADxC,SAGeF,EAA0BC,EAASC,GAHlD,cAGDc,EAHC,OAIL1B,QAAQC,IAAI,qCAAsCyB,GAJ7C,kBAMEA,GANF,4C,sBASA,SAAeO,IAAtB,+B,4CAAO,8BAAAlC,EAAA,6DACLC,QAAQC,IAAI,8BACRW,EAAO,IAAIO,KAAKA,KAAKe,MAAQ,KAC7BvB,EAAUC,EAAKuB,qBAHd,SAICH,EAAqBrB,EAASC,GAJ/B,4C,sBCnJQ,UAA0B,iC,eCSnCwB,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,KAAM,IAErB,EAAKP,4BAA8BA,EAA4BQ,KAA5B,gBACnC,EAAKN,qBAAuBA,EAAqBM,KAArB,gBALhB,E,4FAQd,sBAAAxC,EAAA,sEACQyC,KAAKP,uBADb,gD,0EAIA,WACE,OACE,qBAAKQ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,4BACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAE3C,8BACE,wBAAQC,QAASL,KAAKP,qBAAtB,oCAGA,wBAAQY,QAASL,KAAKT,4BAAtB,uD,GAxBMe,aAkCHV,IC/BAW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62f848fa.chunk.js","sourcesContent":["import { Capacitor } from '@capacitor/core';\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\n\nasync function checkCapacitorNotificationsAvailability () {\n  console.log('checkCapacitorNotificationsAvailability');\n\n  try {\n    let isCapacitorPluginAvailable = await Capacitor.isPluginAvailable('LocalNotifications');\n    console.log('isCapacitorPluginAvailable?', isCapacitorPluginAvailable);\n    \n    if ( isCapacitorPluginAvailable ) {\n      let p = await LocalNotifications.checkPermissions()\n      if (p.display === \"granted\") {\n        return true;\n      } else {\n        let a = await LocalNotifications.requestPermissions()\n        if (a.display === \"granted\") {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n  } catch (error) {\n    alert(error);\n    return false;\n  }\n}\n\nasync function sendCapacitorNotification(message, when) {\n  console.log('sendCapacitorNotification', message, when);\n\n  let isCapacitorNotificationsAvailable = await checkCapacitorNotificationsAvailability();\n  console.log('isCapacitorNotificationsAvailable?', isCapacitorNotificationsAvailable);\n\n  if(isCapacitorNotificationsAvailable) {\n    try {\n      let success = await LocalNotifications.schedule({\n        notifications: [\n          {\n            title: \"TimelyMeetings\",\n            body: message,\n            id: new Date().getTime(),\n            schedule: { at: when },\n            sound: null,\n            attachments: null,\n            actionTypeId: \"\",\n            extra: null\n          }\n        ]\n      });\n      console.log('Success', success);\n      return true; \n    } catch (error) {\n      alert(error);\n      return false;\n    }\n  }\n  return false;\n}\n\nasync function clearCapacitorNotifications() {\n  console.log('clearCapacitorNotifications');\n\n  let pending = await LocalNotifications.getPending();\n  let notifications = pending.notifications;\n  console.log(\"Pending Capacitor Notifications\", notifications);\n\n  await LocalNotifications.cancel(pending);  \n  console.log(\"Cleared Capacitor Notifications\", notifications);  \n\n}\n\n///////////////////////////////////////////////////////////////\n\nasync function sendDefaultNotification(message, when) {\n\n  alert(message);\n\n/*let opts = {\n  requireInteraction: true\n}\n\n  // Let's check if the browser supports notifications\n  if (!(\"Notification\" in window)) {\n    console.log('Browser Notifications not supported.');\n    alert(message);\n  }\n  // Let's check whether notification permissions have already been granted\n  else if (Notification.permission === \"granted\") {\n    // If it's okay let's create a notification\n    console.log('Browser Notifications already granted, attempting to send.');\n    var notification = new Notification(message, opts);\n  }\n\n  // Otherwise, we need to ask the user for permission\n  else if (Notification.permission !== \"denied\") {\n    console.log('Browser Notifications permissions being re-asked.');\n    Notification.requestPermission().then(function(permission) {\n      // If the user accepts, let's create a notification\n      if (permission === \"granted\") {\n        console.log('Browser Notifications granted after being initially denied, attempting to send.');\n        var notification = new Notification(message, opts);\n      } else {\n        console.log('Browser Notifications denied after ask.');\n        alert(message);\n      }\n    });\n  } else {\n    console.log('Browser Notifications denied.');\n    alert(message);\n  }\n  */\n}\n\n///////////////////////////////////////////////////////////////\n\nexport async function clearScheduledNotifications() {\n  console.log('clearNotifications');\n  await clearCapacitorNotifications();\n}\n\nexport async function sendNotification(message) {\n  console.log('sendNotification', message, 'NOW');\n\n  let when = new Date();\n  let success = await sendCapacitorNotification(message, when);\n  console.log('Capacitor Notifications Sent?', success);\n\n  if (!success) {\n    console.log('Attempting Default Notification.');\n    sendDefaultNotification(message, when);\n  }\n}\n\nexport async function scheduleNotification(message, when) {\n  console.log('scheduleNotification', message, when);\n\n  let success = await sendCapacitorNotification(message, when);\n  console.log('Capacitor Notifications scheduled?', success);\n\n  return success;\n}\n\nexport async function sendTestNotification() {\n  console.log('sendTesteNotification (5s)');\n  let when = new Date(Date.now() + 1000 * 5);\n  let message = when.toLocaleTimeString();\n  await scheduleNotification(message, when);\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\n\nimport {clearScheduledNotifications, scheduleNotification, sendNotification, sendTestNotification } from './Notifications'\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { data: [] };\n\n    this.clearScheduledNotifications = clearScheduledNotifications.bind(this);\n    this.sendTestNotification = sendTestNotification.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.sendTestNotification();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </p>\n          <p>\n            <button onClick={this.sendTestNotification}>\n              Send Test Notification\n            </button>\n            <button onClick={this.clearScheduledNotifications}>\n              Clear Scheduled Notifications\n            </button>\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}