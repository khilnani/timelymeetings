{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","data","a","console","log","Capacitor","isPluginAvailable","LocalNotifications","checkPermissions","display","requestPermissions","alert","this","checkNativeNotificationsAvailability","isNotificationsAvailable","schedule","notifications","title","body","id","at","Date","now","sound","attachments","actionTypeId","extra","success","className","src","logo","alt","href","target","rel","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAAe,MAA0B,iC,eCSnCA,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,KAAM,IAFT,E,+GAKd,4BAAAC,EAAA,6DACEC,QAAQC,IAAI,wCADd,kBAIkCC,IAAUC,kBAAkB,sBAJ9D,UAIQA,EAJR,OAKIH,QAAQC,IAAI,oBAAqBE,IAE5BA,EAPT,iCAQoBC,IAAmBC,mBARvC,UASwB,YATxB,OASYC,QATZ,2CAUe,GAVf,yBAYsBF,IAAmBG,qBAZzC,WAa0B,YAb1B,OAacD,QAbd,2CAciB,GAdjB,0CAoBa,GApBb,yFAuBIE,MAAM,EAAD,IAvBT,mBAwBW,GAxBX,0D,4HA4BA,8BAAAT,EAAA,sEACuCU,KAAKC,uCAD5C,UACMC,EADN,OAEEX,QAAQC,IAAI,2BAA4BU,IAErCA,EAJL,gCAMwBP,IAAmBQ,SAAS,CAC9CC,cAAe,CACb,CACEC,MAAO,UACPC,KAAM,iCACNC,GAAI,EACJJ,SAAU,CAAEK,GAAI,IAAIC,KAAKA,KAAKC,MAAQ,MACtCC,MAAO,KACPC,YAAa,KACbC,aAAc,GACdC,MAAO,SAhBjB,OAMQC,EANR,OAoBIxB,QAAQC,IAAI,UAAWuB,GApB3B,gD,0EAwBA,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,mC,GAlEQC,aAgFHpC,IC7EAqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5709e20c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nimport { Capacitor } from '@capacitor/core';\nimport { LocalNotifications } from '@capacitor/local-notifications';\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { data: [] };\n  }\n\n  async checkNativeNotificationsAvailability () {\n    console.log('checkNativeNotificationsAvailability');\n\n    try {\n      let isPluginAvailable = await Capacitor.isPluginAvailable('LocalNotifications');\n      console.log('isPluginAvailable', isPluginAvailable);\n      \n      if ( isPluginAvailable ) {\n        let p = await LocalNotifications.checkPermissions()\n        if (p.display === \"granted\") {\n          return true;\n        } else {\n          let a = await LocalNotifications.requestPermissions()\n          if (a.display === \"granted\") {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    } catch (error) {\n      alert(error);\n      return false;\n    }\n  }\n\n  async componentDidMount() {\n    let isNotificationsAvailable = await this.checkNativeNotificationsAvailability();\n    console.log('isNotificationsAvailable', isNotificationsAvailable);\n\n    if(isNotificationsAvailable) {\n\n      let success = await LocalNotifications.schedule({\n        notifications: [\n          {\n            title: \"On sale\",\n            body: \"Widgets are 10% off. Act fast!\",\n            id: 2,\n            schedule: { at: new Date(Date.now() + 1000 * 5) },\n            sound: null,\n            attachments: null,\n            actionTypeId: \"\",\n            extra: null\n          }\n        ]\n      });\n      console.log('Success', success); \n    }   \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React!\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}